// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: chat.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatServer_Broadcast_FullMethodName = "/ChatServer/Broadcast"
	ChatServer_NewUser_FullMethodName   = "/ChatServer/NewUser"
	ChatServer_DropOut_FullMethodName   = "/ChatServer/DropOut"
)

// ChatServerClient is the client API for ChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServerClient interface {
	Broadcast(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error)
	NewUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Chat, error)
	DropOut(ctx context.Context, in *User, opts ...grpc.CallOption) (*Chat, error)
}

type chatServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServerClient(cc grpc.ClientConnInterface) ChatServerClient {
	return &chatServerClient{cc}
}

func (c *chatServerClient) Broadcast(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatServer_Broadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerClient) NewUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatServer_NewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServerClient) DropOut(ctx context.Context, in *User, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatServer_DropOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServerServer is the server API for ChatServer service.
// All implementations must embed UnimplementedChatServerServer
// for forward compatibility.
type ChatServerServer interface {
	Broadcast(context.Context, *Chat) (*Chat, error)
	NewUser(context.Context, *User) (*Chat, error)
	DropOut(context.Context, *User) (*Chat, error)
	mustEmbedUnimplementedChatServerServer()
}

// UnimplementedChatServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServerServer struct{}

func (UnimplementedChatServerServer) Broadcast(context.Context, *Chat) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedChatServerServer) NewUser(context.Context, *User) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedChatServerServer) DropOut(context.Context, *User) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropOut not implemented")
}
func (UnimplementedChatServerServer) mustEmbedUnimplementedChatServerServer() {}
func (UnimplementedChatServerServer) testEmbeddedByValue()                    {}

// UnsafeChatServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServerServer will
// result in compilation errors.
type UnsafeChatServerServer interface {
	mustEmbedUnimplementedChatServerServer()
}

func RegisterChatServerServer(s grpc.ServiceRegistrar, srv ChatServerServer) {
	// If the following call pancis, it indicates UnimplementedChatServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatServer_ServiceDesc, srv)
}

func _ChatServer_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatServer_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServer).Broadcast(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServer_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatServer_NewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServer).NewUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatServer_DropOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServerServer).DropOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatServer_DropOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServerServer).DropOut(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatServer_ServiceDesc is the grpc.ServiceDesc for ChatServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatServer",
	HandlerType: (*ChatServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _ChatServer_Broadcast_Handler,
		},
		{
			MethodName: "NewUser",
			Handler:    _ChatServer_NewUser_Handler,
		},
		{
			MethodName: "DropOut",
			Handler:    _ChatServer_DropOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

const (
	ChatClient_Receive_FullMethodName = "/ChatClient/Receive"
	ChatClient_Publish_FullMethodName = "/ChatClient/Publish"
)

// ChatClientClient is the client API for ChatClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClientClient interface {
	Receive(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error)
	Publish(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error)
}

type chatClientClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClientClient(cc grpc.ClientConnInterface) ChatClientClient {
	return &chatClientClient{cc}
}

func (c *chatClientClient) Receive(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatClient_Receive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClientClient) Publish(ctx context.Context, in *Chat, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatClient_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatClientServer is the server API for ChatClient service.
// All implementations must embed UnimplementedChatClientServer
// for forward compatibility.
type ChatClientServer interface {
	Receive(context.Context, *Chat) (*Chat, error)
	Publish(context.Context, *Chat) (*Chat, error)
	mustEmbedUnimplementedChatClientServer()
}

// UnimplementedChatClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatClientServer struct{}

func (UnimplementedChatClientServer) Receive(context.Context, *Chat) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedChatClientServer) Publish(context.Context, *Chat) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChatClientServer) mustEmbedUnimplementedChatClientServer() {}
func (UnimplementedChatClientServer) testEmbeddedByValue()                    {}

// UnsafeChatClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatClientServer will
// result in compilation errors.
type UnsafeChatClientServer interface {
	mustEmbedUnimplementedChatClientServer()
}

func RegisterChatClientServer(s grpc.ServiceRegistrar, srv ChatClientServer) {
	// If the following call pancis, it indicates UnimplementedChatClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatClient_ServiceDesc, srv)
}

func _ChatClient_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatClient_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServer).Receive(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatClient_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatClient_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServer).Publish(ctx, req.(*Chat))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatClient_ServiceDesc is the grpc.ServiceDesc for ChatClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatClient",
	HandlerType: (*ChatClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _ChatClient_Receive_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ChatClient_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
